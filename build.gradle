import org.apache.tools.ant.filters.ReplaceTokens

// 编译脚本
buildscript {
    ext {
        springBootVersion = "3.4.2"
    }
    // 仓库配置
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

// 项目配置
allprojects {
    group=APP_GROUP
    version=APP_VERSION
}

// 子模块配置
subprojects {
    apply plugin: 'java-library'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'

    // 仓库配置
    repositories {
        mavenLocal()
        mavenCentral()
    }

    // 依赖管理
    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        }
    }
    // 依赖配置
    dependencies {
        implementation "io.github.cdimascio:dotenv-java:3.1.0"
        implementation "net.logstash.logback:logstash-logback-encoder:8.0"
        implementation "commons-io:commons-io:2.18.0"
        implementation "gg.jte:jte:3.1.16"
    }
    // 编译环境 JDK-21+
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }

    test {
        enabled = false
    }

    tasks.named('test') {
        useJUnitPlatform()
    }
    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:-serial"
        options.encoding = 'UTF-8'
        options.warnings = false
        options.deprecation = true
        options.compilerArgs += ["-parameters"]
    }
    tasks.withType(GenerateModuleMetadata).configureEach {
        enabled = false
    }
    tasks.register('sourcesJar', Jar) {
        dependsOn classes
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }
    javadoc {
        options {
            encoding='UTF-8'
            charSet='UTF-8'
            author=true
            version=true
            failOnError=false
            links=["https://docs.oracle.com/javase/21/docs/api"]
        }
    }
    tasks.register('javadocJar', Jar) {
        archiveClassifier = 'javadoc'
        from javadoc
    }
    // 编译任务忽略案例模块
    afterEvaluate {
        project -> if (project.name == 'flowlong-spring-boot-example' || project.name == 'flowlong-solon-example') {
            project.tasks.configureEach {
                it.enabled = false
            }
        }
    }

    def activeProfile = project.hasProperty("env") ? project.property("env") : "dev"

    sourceSets {
        main {
            resources {
                srcDirs = ['src/main/resources']  // 确保资源目录被正确包含
                include '**/application.yml', "**/application-${activeProfile}.yml","**/*.properties","**/*.xml"
            }
        }
    }

    // 处理 resources 目录，替换 @env@ 占位符
    processResources {
        filesMatching("**/application.yml") { file ->
            filter(ReplaceTokens, tokens: ["env": activeProfile])
        }
    }

}
